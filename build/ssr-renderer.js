/**
 * @file ssr renderer
 * @author *__ author __*{% if: *__ email __* %}(*__ email __*){% /if %}
 */

'use strict';

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const MFS = require('memory-fs');
const webpackDevMiddleware = require('webpack-dev-middleware');
const webpackHotMiddleware = require('webpack-hot-middleware');
const vueServerRenderer = require('vue-server-renderer');

const clientConfig = require('./webpack.client.conf');
const serverConfig = require('./webpack.server.conf');

const template = fs.readFileSync(path.resolve('./core/index.template.html'), 'utf-8');
const createBundleRenderer = vueServerRenderer.createBundleRenderer;

/**
 * get vue server renderer
 *
 * @param {Koa} app koa app instance
 * @return {Promise.<*>}
 */
module.exports = async function getRenderer(app) {
    let {bundle, clientManifest} = await getBundleAndClientManifest(app);

    let renderer = createBundleRenderer(bundle, {
        template,
        runInNewContext: false
    });

    return Promise.resolve(renderer);
};

/**
 * get server bundle and client manifest
 *
 * @param {Koa} app koa app instance
 * @return {Promise.<Object>}
 */
async function getBundleAndClientManifest(app) {
    let bundle;
    let clientManifest;

    clientConfig.entry.app = ['webpack-hot-middleware/client', ...clientConfig.entry.app];
    clientConfig.output.filename = '[name].js';
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    );

    // init client compiler
    let clientCompiler = webpack(clientConfig);

    let devMiddleware = webpackDevMiddleware(clientCompiler, {
        publicPath: clientConfig.output.publicPath
    });
    // use webpack-dev-middleware to serve some flies
    app.use(async ctx => {
        await devMiddleware(ctx.request, ctx.response, () => {});
    });

    let hotMiddleware = webpackHotMiddleware(clientCompiler, {heartbeat: 5000});
    // use webpack-hot-middleware
    app.use(async ctx => {
        await new Promise((resolve, reject) => {
            hotMiddleware(ctx.request, ctx.response, (err) => {
                if (err) {
                    return reject(err);
                }
                resolve();
            });
        });
    });

    clientCompiler.plugin('done', stats => {
        stats = stats.toJson();
        stats.errors.forEach(err => console.error(err));
        stats.warnings.forEach(err => console.warn(err));

        if (stats.errors.length) {
            return;
        }

        clientManifest = JSON.parse(readFile(
            devMiddleware.fileSystem,
            'vue-ssr-client-manifest.json'
        ));

        // ready
        ready();
    });

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig);
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) {
            throw err;
        }
        stats = stats.toJson();
        if (stats.errors.length) {
            // print all errors
            for (let error of stats.errors) {
                console.error(error);
            }

            return;
        }

        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));

        // ready
        ready();
    });

    let resolve;
    let readyPromise = new Promise(r => resolve = r);

    function ready() {
        if (bundle && clientManifest) {
            resolve({bundle, clientManifest});
        }
    }

    return await readyPromise;
};

/**
 * read file sync
 *
 * @param {*} fs file system
 * @param {string} file file path
 * @return {string} file content
 */
function readFile(fs, file) {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    }
    catch (e) {}
};
