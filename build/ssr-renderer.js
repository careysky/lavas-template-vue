/**
 * @file ssr renderer
 * @author *__ author __*{% if: *__ email __* %}(*__ email __*){% /if %}
 */

'use strict';

const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const MFS = require('memory-fs');
const koaWebpack = require('koa-webpack');
const vueServerRenderer = require('vue-server-renderer');

const isProd = process.env.NODE_ENV === 'production';
const clientConfig = require('./webpack.client.conf');
const serverConfig = require('./webpack.server.conf');
const config = require('./config');

const template = fs.readFileSync(path.resolve('./core/index.template.html'), 'utf-8');
const createBundleRenderer = vueServerRenderer.createBundleRenderer;

let renderer;
let bundle;
let clientManifest;

let resolve;
let readyPromise = new Promise(r => resolve = r);


module.exports = {

    /**
     * init renderer
     *
     * @param {Koa} app koa app instance
     */
    initRenderer(app) {
        if (isProd) {
            bundle = require('../dist/vue-ssr-server-bundle.json');
            clientManifest = require('../dist/vue-ssr-client-manifest.json');
            createRenderer();
        }
        else {
            // get client manifest
            getClientManifest(app, (err, manifest) => {
                clientManifest = manifest;
                createRenderer();
            });

            // get server bundle
            getServerBundle((err, serverBundle) => {
                bundle = serverBundle;
                createRenderer();
            });
        }
    },

    /**
     * get vue server renderer
     *
     * @return {Promise.<*>}
     */
    getRenderer() {
        if (renderer) {
            return Promise.resolve(renderer);
        }

        return readyPromise;
    }
};


/**
 * create renderer
 */
function createRenderer() {
    if (bundle && clientManifest) {
        let first = !renderer;
        renderer = createBundleRenderer(bundle, {
            template,
            clientManifest,
            runInNewContext: false
        });

        if (first) {
            resolve(renderer);
        }
    }
}

/**
 * get client manifest, and add middlewares to Koa instance
 *
 * @param {Koa} app koa app instance
 * @param {Function} callback callback
 */
function getClientManifest(app, callback) {
    let clientManifest;

    clientConfig.entry.app = ['webpack-hot-middleware/client', ...clientConfig.entry.app];
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    );

    // init client compiler
    let clientCompiler = webpack(clientConfig);

    // use koa webpack middleware which already includes dev&hot middleware
    let koaWebpackMiddleware = koaWebpack({
        compiler: clientCompiler,
        dev: {
            publicPath: config.webpack.output.publicPath,
            noInfo: true
        },
        hot: {
            heartbeat: 5000
        }
    });
    app.use(koaWebpackMiddleware);

    clientCompiler.plugin('done', stats => {
        stats = stats.toJson();
        stats.errors.forEach(err => console.error(err));
        stats.warnings.forEach(err => console.warn(err));

        if (stats.errors.length) {
            // print all errors
            for (let error of stats.errors) {
                console.error(error);
            }

            return;
        }

        clientManifest = JSON.parse(readFile(
            koaWebpackMiddleware.dev.fileSystem,
            'vue-ssr-client-manifest.json'
        ));

        callback(null, clientManifest);
    });

}

/**
 * get server bundle
 *
 * @param {Function} callback callback
 */
function getServerBundle(callback) {
    let bundle;

    // watch and update server renderer
    const serverCompiler = webpack(serverConfig);
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
    serverCompiler.watch({}, (err, stats) => {
        if (err) {
            throw err;
        }
        stats = stats.toJson();
        if (stats.errors.length) {
            // print all errors
            for (let error of stats.errors) {
                console.error(error);
            }

            return;
        }

        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));

        callback(null, bundle);
    });
}

/**
 * read file sync
 *
 * @param {*} fs file system
 * @param {string} file file path
 * @return {string} file content
 */
function readFile(fs, file) {
    try {
        return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
    }
    catch (e) {}
}
