{"version":3,"file":"workbox-broadcast-cache-update.dev.js","sources":["packages/workbox-broadcast-cache-update/_version.mjs","packages/workbox-broadcast-cache-update/utils/responsesAreSame.mjs","packages/workbox-broadcast-cache-update/messageTypes.mjs","packages/workbox-broadcast-cache-update/broadcastUpdate.mjs","packages/workbox-broadcast-cache-update/BroadcastCacheUpdate.mjs","packages/workbox-broadcast-cache-update/Plugin.mjs","packages/workbox-broadcast-cache-update/_public.mjs","packages/workbox-broadcast-cache-update/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:broadcast-cache-update:3.0.0-alpha.3']=1;}catch(e){} // eslint-disable-line","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport '../_version.mjs';\n\n/**\n * Given two `Response's`, compares several header values to see if they are\n * the same or not.\n *\n * @param {Response} firstResponse\n * @param {Response} secondResponse\n * @param {Array<string>} headersToCheck\n * @return {boolean}\n *\n * @memberof workbox.broadcastUpdate\n * @private\n */\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!(firstResponse instanceof Response &&\n      secondResponse instanceof Response)) {\n      throw new WorkboxError('invalid-responses-are-same-args');\n    }\n  }\n\n  const atLeastOneHeaderAvailable = headersToCheck.some((header) => {\n    return firstResponse.headers.has(header) &&\n      secondResponse.headers.has(header);\n  });\n\n  if (!atLeastOneHeaderAvailable) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to determine where the response has been updated ` +\n        `because none of the headers that would be checked are present.`);\n      logger.debug(`Attempting to compare the following: `,\n        firstResponse, secondResponse, headersToCheck);\n    }\n\n    // Just return true, indicating the that responses are the same, since we\n    // can't determine otherwise.\n    return true;\n  }\n\n  return headersToCheck.every((header) => {\n    const headerStateComparison = firstResponse.headers.has(header) ===\n      secondResponse.headers.has(header);\n    const headerValueComparison = firstResponse.headers.get(header) ===\n      secondResponse.headers.get(header);\n\n    return headerStateComparison && headerValueComparison;\n  });\n};\n\nexport {responsesAreSame};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport './_version.mjs';\n\nexport default {\n  CACHE_UPDATED: 'CACHE_UPDATED',\n};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport messageTypes from './messageTypes.mjs';\nimport './_version.mjs';\n\n/**\n * You would not normally call this method directly; it's called automatically\n * by an instance of the {@link BroadcastCacheUpdate} class. It's exposed here\n * for the benefit of developers who would rather not use the full\n * `BroadcastCacheUpdate` implementation.\n *\n * Calling this will dispatch a message on the provided\n * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel}\n * to notify interested subscribers about a change to a cached resource.\n *\n * The message that's posted has a formation inspired by the\n * [Flux standard action](https://github.com/acdlite/flux-standard-action#introduction)\n * format like so:\n *\n * ```\n * {\n *   type: 'CACHE_UPDATED',\n *   meta: 'workbox-broadcast-cache-update',\n *   payload: {\n *     cacheName: 'the-cache-name',\n *     updatedUrl: 'https://example.com/'\n *   }\n * }\n * ```\n *\n * (Usage of [Flux](https://facebook.github.io/flux/) itself is not at\n * all required.)\n *\n * @param {BroadcastChannel} channel The `BroadcastChannel` to use.\n * @param {string} cacheName The name of the cache in which the updated\n *        `Response` was stored.\n * @param {string} url The URL associated with the updated `Response`.\n * @param {string} source A string identifying this library as the source\n *        of the update message.\n *\n * @memberof workbox.broadcastUpdate\n */\nconst broadcastUpdate = (channel, cacheName, url, source) => {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(channel, BroadcastChannel, {\n      moduleName: 'workbox-broadcast-cache-update',\n      className: '~',\n      funcName: 'broadcaseUpdate',\n      paramName: 'channel',\n    });\n    assert.isType(cacheName, 'string', {\n      moduleName: 'workbox-broadcast-cache-update',\n      className: '~',\n      funcName: 'broadcaseUpdate',\n      paramName: 'cacheName',\n    });\n    assert.isType(source, 'string', {\n      moduleName: 'workbox-broadcast-cache-update',\n      className: '~',\n      funcName: 'broadcaseUpdate',\n      paramName: 'source',\n    });\n    assert.isType(url, 'string', {\n      moduleName: 'workbox-broadcast-cache-update',\n      className: '~',\n      funcName: 'broadcaseUpdate',\n      paramName: 'url',\n    });\n  }\n\n  channel.postMessage({\n    type: messageTypes.CACHE_UPDATED,\n    meta: source,\n    payload: {\n      cacheName: cacheName,\n      updatedUrl: url,\n    },\n  });\n};\n\nexport {broadcastUpdate};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {responsesAreSame} from './utils/responsesAreSame.mjs';\nimport {broadcastUpdate} from './broadcastUpdate.mjs';\nimport './_version.mjs';\n\n/**\n * Uses the [Broadcast Channel API]{@link https://developers.google.com/web/updates/2016/09/broadcastchannel}\n * to notify interested parties when a cached response has been updated.\n *\n * For efficiency's sake, the underlying response bodies are not compared;\n * only specific response headers are checked.\n *\n * @memberof workbox.broadcastUpdate\n */\nclass BroadcastCacheUpdate {\n  /**\n   * Construct a BroadcastCacheUpdate instance with a specific `channelName` to\n   * broadcast messages on\n   *\n   * @param {string} channelName The name that will be used when creating\n   * the `BroadcastChannel`.\n   * @param {Object} options\n   * @param {Array<string>}\n   * [options.headersToCheck=['content-length', 'etag', 'last-modified']] A\n   * list of headers that will be used to determine whether the responses\n   * differ.\n   * @param {string} [options.source='workbox-broadcast-cache-update'] An\n   * attribution value that indicates where the update originated.\n   */\n  constructor(channelName, {headersToCheck, source} = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof channelName !== 'string' || channelName.length === 0) {\n        throw new WorkboxError('channel-name-required');\n      }\n    }\n\n    this._channelName = channelName;\n    this._headersToCheck = headersToCheck || [\n      'content-length',\n      'etag',\n      'last-modified',\n    ];\n    this._source = source || 'workbox-broadcast-cache-update';\n\n    // TODO assert typeof headersToCheck instanceof Array\n  }\n\n  /**\n   * @return {BroadcastChannel} The BroadcastChannel instance used for\n   * broadcasting updates.\n   *\n   * @private\n   */\n  _getChannel() {\n    if (!this._channel) {\n      this._channel = new BroadcastChannel(this._channelName);\n    }\n    return this._channel;\n  }\n\n  /**\n   * Compare two [Responses](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n   * and send a message via the\n   * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel API}\n   * if they differ.\n   *\n   * Neither of the Responses can be {@link http://stackoverflow.com/questions/39109789|opaque}.\n   *\n   * @param {Response} firstResponse First responses to compare.\n   * @param {Response} secondResponse Second responses to compare.\n   * @param {string} url The URL of the updated request.\n   * @param {string} cacheName Name of the cache the responses belong to.\n   * This is included in the message posted on the broadcast channel.\n   */\n  notifyIfUpdated(firstResponse, secondResponse, url, cacheName) {\n    // TODO: Move to assert\n    // isType({cacheName}, 'string');\n\n    if (!responsesAreSame(\n      firstResponse, secondResponse, this._headersToCheck)) {\n      broadcastUpdate(this._getChannel(), cacheName, url, this._source);\n    }\n  }\n}\n\nexport {BroadcastCacheUpdate};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {BroadcastCacheUpdate} from './BroadcastCacheUpdate.mjs';\nimport './_version.mjs';\n\n/**\n * This plugin will automatically broadcast a message whenever a cached response\n * is updated.\n *\n * @memberof workbox.broadcastUpdate\n */\nclass Plugin {\n    /**\n   * Construct a new instance with a specific `channelName` to\n   * broadcast messages on\n   *\n   * @param {string} channelName The name that will be used when creating\n   * the `BroadcastChannel`.\n   * @param {Object} options\n   * @param {Array<string>}\n   * [options.headersToCheck=['content-length', 'etag', 'last-modified']] A\n   * list of headers that will be used to determine whether the responses\n   * differ.\n   * @param {string} [options.source='workbox-broadcast-cache-update'] An\n   * attribution value that indicates where the update originated.\n   */\n  constructor(channelName, options) {\n    this._broadcastUpdate = new BroadcastCacheUpdate(channelName, options);\n  }\n  /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `workbox-sw` and `workbox-runtime-caching` handlers when an entry is\n   * added to a cache.\n   *\n   * @private\n   * @param {Object} input The input object to this function.\n   * @param {string} input.cacheName Name of the cache the responses belong to.\n   * @param {Response} [input.oldResponse] The previous cached value, if any.\n   * @param {Response} input.newResponse The new value in the cache.\n   * @param {string} input.url The cache key URL.\n   */\n  cacheDidUpdate({cacheName, oldResponse, newResponse, url}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-broadcast-cache-update',\n        className: 'Plugin',\n        funcName: 'constructor',\n        paramName: 'cacheName',\n      });\n      assert.isInstance(newResponse, Response, {\n        moduleName: 'workbox-broadcast-cache-update',\n        className: 'Plugin',\n        funcName: 'constructor',\n        paramName: 'newResponse',\n      });\n    }\n\n    if (!oldResponse) {\n      // Without a two responses there is nothing to comapre\n      return;\n    }\n\n    this._broadcastUpdate\n      .notifyIfUpdated(oldResponse, newResponse, cacheName, url);\n  }\n}\n\nexport {Plugin};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {BroadcastCacheUpdate} from './BroadcastCacheUpdate.mjs';\nimport {Plugin} from './Plugin.mjs';\nimport {broadcastUpdate} from './broadcastUpdate.mjs';\nimport messageTypes from './messageTypes.mjs';\nimport './_version.mjs';\n\nexport {\n  BroadcastCacheUpdate,\n  Plugin,\n  broadcastUpdate,\n  messageTypes,\n};\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport './_version.mjs';\n\nexport * from './_public.mjs';\n"],"names":["workbox","v","e","responsesAreSame","firstResponse","secondResponse","headersToCheck","Response","WorkboxError","atLeastOneHeaderAvailable","some","header","headers","has","warn","debug","every","headerStateComparison","headerValueComparison","get","broadcastUpdate","channel","cacheName","url","source","isInstance","BroadcastChannel","isType","postMessage","messageTypes","CACHE_UPDATED","BroadcastCacheUpdate","channelName","length","_channelName","_headersToCheck","_source","_channel","_getChannel","Plugin","options","_broadcastUpdate","oldResponse","newResponse","notifyIfUpdated"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}