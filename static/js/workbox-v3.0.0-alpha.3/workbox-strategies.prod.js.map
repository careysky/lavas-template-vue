{"version":3,"file":"workbox-strategies.prod.js","sources":["packages/workbox-strategies/_version.mjs","packages/workbox-strategies/CacheFirst.mjs","packages/workbox-strategies/CacheOnly.mjs","packages/workbox-strategies/plugins/cacheOkAndOpaquePlugin.mjs","packages/workbox-strategies/NetworkFirst.mjs","packages/workbox-strategies/NetworkOnly.mjs","packages/workbox-strategies/StaleWhileRevalidate.mjs","packages/workbox-strategies/_default.mjs","packages/workbox-strategies/browser.mjs"],"sourcesContent":["try{self.workbox.v['workbox:strategies:3.0.0-alpha.3']=1;}catch(e){} // eslint-disable-line","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport messages from './utils/messages.mjs';\nimport './_version.mjs';\n\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have beeng revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * @memberof workbox.strategies\n */\nclass CacheFirst {\n  // TODO: Replace `plugins` parameter link with link to d.g.c.\n\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {string} options.plugins [Plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}\n   * to use in conjunction with this caching strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event The fetch event to run this strategy\n   * against.\n   * @return {Promise<Response>}\n   */\n  async handle({event}) {\n    const logs = [];\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'CacheFirst',\n        funcName: 'handle',\n        paramName: 'event',\n      });\n    }\n\n    let response = await cacheWrapper.match(\n      this._cacheName,\n      event.request,\n      null,\n      this._plugins\n    );\n\n    let error;\n    if (!response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(\n          `No response found in the '${this._cacheName}' cache. ` +\n          `Will respond with a network request.`);\n      }\n      try {\n        response = await this._getFromNetwork(event);\n      } catch (err) {\n        error = err;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Got response from network.`);\n        } else {\n          logs.push(`Unable to get a response from the network.`);\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(\n          `Found a cached response in the '${this._cacheName}' cache.`);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n        messages.strategyStart('CacheFirst', event));\n      for (let log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (error) {\n      // Don't swallow error as we'll want it to throw and enable catch\n      // handlers in router.\n      throw error;\n    }\n\n    return response;\n  }\n\n  /**\n   * Handles the network and cache part of CacheFirst.\n   *\n   * @param {FetchEvent} event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getFromNetwork(event) {\n    const response = await fetchWrapper.fetch(\n      event.request,\n      null,\n      this._plugins\n    );\n\n    // Keep the service worker while we put the request to the cache\n    const responseClone = response.clone();\n    event.waitUntil(\n      cacheWrapper.put(\n        this._cacheName,\n        event.request,\n        responseClone,\n        this._plugins\n      )\n    );\n\n    return response;\n  }\n}\n\nexport {CacheFirst};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport messages from './utils/messages.mjs';\nimport './_version.mjs';\n\n// TODO: Replace `Workbox plugins` link in the class description with a\n// link to d.g.c.\n// TODO: Replace `plugins` parameter link with link to d.g.c.\n\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any [Workbox plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}.\n *\n * @memberof workbox.strategies\n */\nclass CacheOnly {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {string} options.plugins [Plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}\n   * to use in conjunction with this caching strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event The fetch event to run this strategy\n   * against.\n   * @return {Promise<Response>}\n   */\n  async handle({event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'CacheOnly',\n        funcName: 'handle',\n        paramName: 'event',\n      });\n    }\n\n    const response = await cacheWrapper.match(\n      this._cacheName,\n      event.request,\n      null,\n      this._plugins\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n        messages.strategyStart('CacheOnly', event));\n      if (response) {\n        logger.log(`Found a cached response in the '${this._cacheName}'` +\n          ` cache.`);\n        messages.printFinalResponse(response);\n      } else {\n        logger.log(`No response found in the '${this._cacheName}' cache.`);\n      }\n      logger.groupEnd();\n    }\n\n    return response;\n  }\n}\n\nexport {CacheOnly};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport '../_version.mjs';\n\nexport default {\n  /**\n   * Return return a response (i.e. allow caching) if the\n   * response is ok (i.e. 200) or is opaque.\n   *\n   * @param {Object} input\n   * @param {Response} input.response\n   * @return {Response|null}\n   *\n   * @private\n   */\n  cacheWillUpdate: ({response}) => {\n    if (response.ok || response.status === 0) {\n      return response;\n    }\n    return null;\n  },\n};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\n\nimport messages from './utils/messages.mjs';\nimport cacheOkAndOpaquePlugin from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n\n// TODO: Change opaque responses to d.g.c link\n// TODO: Replace `plugins` parameter link with link to d.g.c.\n\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * @memberof workbox.strategies\n */\nclass NetworkFirst {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {string} options.plugins [Plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}\n   * to use in conjunction with this caching strategy.\n   * @param {number} options.networkTimeoutSeconds If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate =\n        options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ?\n        options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds;\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: 'NetworkFirst',\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds',\n        });\n      }\n    }\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event The fetch event to run this strategy\n   * against.\n   * @return {Promise<Response>}\n   */\n  async handle({event}) {\n    const logs = [];\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkFirst',\n        funcName: 'handle',\n        paramName: 'event',\n      });\n    }\n\n    const promises = [];\n    let timeoutId;\n\n    if (this._networkTimeoutSeconds) {\n      const {id, promise} = this._getTimeoutPromise(event, logs);\n      timeoutId = id;\n      promises.push(promise);\n    }\n\n    const networkPromise = this._getNetworkPromise(timeoutId, event, logs);\n    promises.push(networkPromise);\n\n    const response = await Promise.race(promises);\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n        messages.strategyStart('NetworkFirst', event));\n      for (let log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    return response;\n  }\n\n  /**\n   * @param {FetchEvent} event\n   * @param {Array} logs A reference to the logs array\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  _getTimeoutPromise(event, logs) {\n    let timeoutId;\n    const timeoutPromise = new Promise((resolve) => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(`Timing out the network response at ` +\n            `${this._networkTimeoutSeconds} seconds.`);\n        }\n\n        resolve(await this._respondFromCache(event.request));\n      };\n\n      timeoutId = setTimeout(\n        onNetworkTimeout,\n        this._networkTimeoutSeconds * 1000,\n      );\n    });\n\n    return {\n      promise: timeoutPromise,\n      id: timeoutId,\n    };\n  }\n\n  /**\n   * @param {number} timeoutId\n   * @param {FetchEvent} event\n   * @param {Array} logs A reference to the logs Array.\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getNetworkPromise(timeoutId, event, logs) {\n    let error;\n    let response;\n    try {\n      response = await fetchWrapper.fetch(\n        event.request,\n        this._plugins\n      );\n    } catch (err) {\n      error = err;\n    }\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(`Got response from network.`);\n      } else {\n        logs.push(`Unable to get a response from the network. Will respond ` +\n          `with a cached response.`);\n      }\n    }\n\n    if (error || !response) {\n      response = await this._respondFromCache(event.request);\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(`Found a cached response in the '${this._cacheName}'` +\n            ` cache.`);\n        } else {\n          logs.push(`No response found in the '${this._cacheName}' cache.`);\n        }\n      }\n    } else {\n       // Keep the service worker alive while we put the request in the cache\n      const responseClone = response.clone();\n      event.waitUntil(\n        cacheWrapper.put(\n          this._cacheName,\n          event.request,\n          responseClone,\n          this._plugins\n        )\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Used if the network timeouts or fails to make the request.\n   *\n   * @param {Request} request The fetchEvent request to match in the cache\n   * @return {Promise<Object>}\n   *\n   * @private\n   */\n  _respondFromCache(request) {\n    return cacheWrapper.match(\n      this._cacheName,\n      request,\n      null,\n      this._plugins\n    );\n  }\n}\n\nexport {NetworkFirst};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport messages from './utils/messages.mjs';\nimport './_version.mjs';\n\n// TODO: Replace `Workbox plugins` link in the class description with a\n// link to d.g.c.\n// TODO: Replace `plugins` parameter link with link to d.g.c.\n\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any [Workbox plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}.\n *\n * @memberof workbox.strategies\n */\nclass NetworkOnly {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {string} options.plugins [Plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}\n   * to use in conjunction with this caching strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n    this._plugins = options.plugins || [];\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event The fetch event to run this strategy\n   * against.\n   * @return {Promise<Response>}\n   */\n  async handle({event}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'NetworkOnly',\n        funcName: 'handle',\n        paramName: 'event',\n      });\n    }\n\n    let error;\n    let response;\n    try {\n      response = await fetchWrapper.fetch(\n        event.request,\n        null,\n        this._plugins\n      );\n    } catch (err) {\n      error = err;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n        messages.strategyStart('NetworkOnly', event));\n      if (response) {\n        logger.log(`Got response from network.`);\n      } else {\n        logger.log(`Unable to get a response from the network.`);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    // If there was an error thrown, re-throw it to ensure the Routers\n    // catch handler is triggered.\n    if (error) {\n      throw error;\n    }\n\n    return response;\n  }\n}\n\nexport {NetworkOnly};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\nimport {cacheWrapper} from 'workbox-core/_private/cacheWrapper.mjs';\nimport {fetchWrapper} from 'workbox-core/_private/fetchWrapper.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\n\nimport messages from './utils/messages.mjs';\nimport cacheOkAndOpaquePlugin from './plugins/cacheOkAndOpaquePlugin.mjs';\nimport './_version.mjs';\n\n// TODO: Replace `Workbox plugins` link in the class description with a\n// link to d.g.c.\n// TODO: Replace `plugins` parameter link with link to d.g.c.\n\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * @memberof workbox.strategies\n */\nclass StaleWhileRevalidate {\n  /**\n   * @param {Object} options\n   * @param {string} options.cacheName Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link workbox.core.cacheNames}.\n   * @param {string} options.plugins [Plugins]{@link https://docs.google.com/document/d/1Qye_GDVNF1lzGmhBaUvbgwfBWRQDdPgwUAgsbs8jhsk/edit?usp=sharing}\n   * to use in conjunction with this caching strategy.\n   */\n  constructor(options = {}) {\n    this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n      this._plugins = options.plugins || [];\n\n    if (options.plugins) {\n      let isUsingCacheWillUpdate =\n        options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n      this._plugins = isUsingCacheWillUpdate ?\n        options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n    } else {\n      // No plugins passed in, use the default plugin.\n      this._plugins = [cacheOkAndOpaquePlugin];\n    }\n  }\n\n  /**\n   * This method will perform a request strategy and follows an API that\n   * will work with the\n   * [Workbox Router]{@link workbox.routing.Router}.\n   *\n   * @param {Object} input\n   * @param {FetchEvent} input.event The fetch event to run this strategy\n   * against.\n   * @return {Promise<Response>}\n   */\n  async handle({event}) {\n    const logs = [];\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(event, FetchEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'StaleWhileRevalidate',\n        funcName: 'handle',\n        paramName: 'event',\n      });\n    }\n\n    const fetchAndCachePromise = this._getFromNetwork(event);\n\n    let response = await cacheWrapper.match(\n      this._cacheName,\n      event.request,\n      null,\n      this._plugins\n    );\n\n    if (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`Found a cached response in the '${this._cacheName}'` +\n          ` cache. Will update with the network response in the background.`);\n      }\n      event.waitUntil(fetchAndCachePromise);\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        logs.push(`No response found in the '${this._cacheName}' cache. ` +\n          `Will wait for the network response.`);\n      }\n      response = await fetchAndCachePromise;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(\n        messages.strategyStart('StaleWhileRevalidate', event));\n      for (let log of logs) {\n        logger.log(log);\n      }\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    return response;\n  }\n\n  /**\n   * @param {FetchEvent} event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n  async _getFromNetwork(event) {\n    const response = await fetchWrapper.fetch(\n      event.request,\n      null,\n      this._plugins\n    );\n\n    event.waitUntil(\n      cacheWrapper.put(\n        this._cacheName,\n        event.request,\n        response.clone(),\n        this._plugins\n      )\n    );\n\n    return response;\n  }\n}\n\nexport {StaleWhileRevalidate};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {CacheFirst} from './CacheFirst.mjs';\nimport {CacheOnly} from './CacheOnly.mjs';\nimport {NetworkFirst} from './NetworkFirst.mjs';\nimport {NetworkOnly} from './NetworkOnly.mjs';\nimport {StaleWhileRevalidate} from './StaleWhileRevalidate.mjs';\n\nimport './_version.mjs';\n\n/**\n * @function workbox.strategies.cacheFirst\n * @param {StrategyOptions} options\n */\n\n/**\n * @function workbox.strategies.cacheOnly\n * @param {StrategyOptions} options\n */\n\n/**\n * @function workbox.strategies.networkFirst\n * @param {StrategyOptions} options\n */\n\n/**\n * @function workbox.strategies.networkOnly\n * @param {StrategyOptions} options\n */\n\n/**\n * @function workbox.strategies.staleWhileRevalidate\n * @param {StrategyOptions} options\n */\n\nconst mapping = {\n  cacheFirst: CacheFirst,\n  cacheOnly: CacheOnly,\n  networkFirst: NetworkFirst,\n  networkOnly: NetworkOnly,\n  staleWhileRevalidate: StaleWhileRevalidate,\n};\n\nconst defaultExport = {};\nObject.keys(mapping).forEach((keyName) => {\n  defaultExport[keyName] = (options = {}) => {\n    const StrategyClass = mapping[keyName];\n    return new StrategyClass(\n      Object.assign(options)\n    );\n  };\n});\n\nexport default defaultExport;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as publicAPI from './_public.mjs';\nimport defaultExport from './_default.mjs';\nimport './_version.mjs';\n\nconst finalExport = Object.assign(defaultExport, publicAPI);\n\nexport default finalExport;\n"],"names":["workbox","v","e","CacheFirst","options","_cacheName","cacheNames","getRuntimeName","cacheName","_plugins","plugins","event","error","response","cacheWrapper","match","_this","request","_getFromNetwork","err","fetchWrapper","fetch","_this2","responseClone","clone","waitUntil","put","CacheOnly","ok","status","NetworkFirst","isUsingCacheWillUpdate","some","plugin","cacheWillUpdate","cacheOkAndOpaquePlugin","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","Promise","race","resolve","onNetworkTimeout","_respondFromCache","setTimeout","this","_this3","NetworkOnly","StaleWhileRevalidate","fetchAndCachePromise","mapping","defaultExport","Object","keys","forEach","keyName","StrategyClass","assign","publicAPI"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}