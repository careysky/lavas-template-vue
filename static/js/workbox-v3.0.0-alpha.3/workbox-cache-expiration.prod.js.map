{"version":3,"file":"workbox-cache-expiration.prod.js","sources":["packages/workbox-cache-expiration/_version.mjs","packages/workbox-cache-expiration/models/CacheTimestampsModel.mjs","packages/workbox-cache-expiration/CacheExpiration.mjs","packages/workbox-cache-expiration/Plugin.mjs"],"sourcesContent":["try{self.workbox.v['workbox:cache-expiration:3.0.0-alpha.3']=1;}catch(e){} // eslint-disable-line","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {DBWrapper} from 'workbox-core/_private/DBWrapper.mjs';\nimport '../_version.mjs';\n\nconst URL_KEY = 'url';\nconst TIMESTAMP_KEY = 'timestamp';\n\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    // TODO Check cacheName\n\n    this._cacheName = cacheName;\n    this._storeName = cacheName;\n\n    this._db = new DBWrapper('workbox-cache-expiration', 1, {\n      onupgradeneeded: (evt) => evt.target.result\n          .createObjectStore(this._storeName, {keyPath: URL_KEY})\n          .createIndex(TIMESTAMP_KEY, TIMESTAMP_KEY, {unique: false}),\n    });\n  }\n\n  /**\n   * @param {string} url\n   * @param {number} timestamp\n   *\n   * @private\n   */\n  async setTimestamp(url, timestamp) {\n    await this._db.put(this._storeName, {\n      [URL_KEY]: new URL(url, location).href,\n      [TIMESTAMP_KEY]: timestamp,\n    });\n  }\n\n  /**\n   * Get all of the timestamps in the indexedDB.\n   *\n   * @return {Array<Objects>}\n   *\n   * @private\n   */\n  async getAllTimestamps() {\n    return await this._db.getAllMatching(this._storeName, {\n      index: TIMESTAMP_KEY,\n    });\n  }\n\n  /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param {string} url\n   * @return {number}\n   *\n   * @private\n   */\n  async getTimestamp(url) {\n    const timestampObject = await this._db.get(this._storeName, url);\n    return timestampObject.timestamp;\n  }\n\n  /**\n   * @param {string} url\n   *\n   * @private\n   */\n  async deleteUrl(url) {\n    await this._db.delete(this._storeName, new URL(url, location).href);\n  }\n}\n\nexport default CacheTimestampsModel;\n","/*\n  Copyright 2017 Google Inc.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {logger} from 'workbox-core/_private/logger.mjs';\nimport CacheTimestampsModel from './models/CacheTimestampsModel.mjs';\nimport './_version.mjs';\n\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox.expiration\n */\nclass CacheExpiration {\n  /**\n   * To construct a new CacheExpiration instance you must provide at least\n   * one of the `config` properties.\n   *\n   * @param {string} cacheName Name of the cache to apply restrictions to.\n   * @param {Object} config\n   * @param {number} [config.maxEntries] The maximum number of entries to cache.\n   * Entries used the least will be removed as the maximum is reached.\n   * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n   * it's treated as stale and removed.\n   */\n  constructor(cacheName, config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-cache-expiration',\n        className: 'CacheExpiration',\n        funcName: 'constructor',\n        paramName: 'cacheName',\n      });\n\n      if (!(config.maxEntries || config.maxAgeSeconds)) {\n        throw new WorkboxError('max-entries-or-age-required', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor',\n        });\n      }\n\n      if (config.maxEntries) {\n        assert.isType(config.maxEntries, 'number', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor',\n          paramName: 'config.maxEntries',\n        });\n\n        // TODO: Assert is positive\n      }\n\n      if (config.maxAgeSeconds) {\n        assert.isType(config.maxAgeSeconds, 'number', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor',\n          paramName: 'config.maxAgeSeconds',\n        });\n\n        // TODO: Assert is positive\n      }\n    }\n\n    this._isRunning = false;\n    this._rerunRequested = false;\n    this._maxEntries = config.maxEntries;\n    this._maxAgeSeconds = config.maxAgeSeconds;\n    this._cacheName = cacheName;\n    this._timestampModel = new CacheTimestampsModel(cacheName);\n  }\n\n  /**\n   * Expires entries for the given cache and given criteria.\n   */\n  async expireEntries() {\n    if (this._isRunning) {\n      this._rerunRequested = true;\n      return;\n    }\n    this._isRunning = true;\n\n    const now = Date.now();\n\n    // First, expire old entries, if maxAgeSeconds is set.\n    const oldEntries = await this._findOldEntries(now);\n\n    // Once that's done, check for the maximum size.\n    const extraEntries = await this._findExtraEntries();\n\n    // Use a Set to remove any duplicates following the concatenation, then\n    // convert back into an array.\n    const allUrls = [...new Set(oldEntries.concat(extraEntries))];\n\n    await Promise.all([\n      this._deleteFromCache(allUrls),\n      this._deleteFromIDB(allUrls),\n    ]);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // TODO: break apart entries deleted due to expiration vs size restraints\n      if (allUrls.length > 0) {\n        logger.groupCollapsed(\n          `Expired ${allUrls.length} ` +\n          `${allUrls.length === 1 ? 'entry' : 'entries'} and removed ` +\n          `${allUrls.length === 1 ? 'it' : 'them'} from the ` +\n          `'${this._cacheName}' cache.`);\n        logger.log(\n          `Expired the following ${allUrls.length === 1 ? 'URL' : 'URLs'}:`);\n        allUrls.forEach((url) => logger.log(`    ${url}`));\n        logger.groupEnd();\n      } else {\n        logger.debug(`Cache expiration ran and found no entries to remove.`);\n      }\n    }\n\n    this._isRunning = false;\n    if (this._rerunRequested) {\n      this._rerunRequested = false;\n      this.expireEntries();\n    }\n  }\n\n  /**\n   * Expires entries based on the maximum age.\n   *\n   * @param {number} expireFromTimestamp A timestamp.\n   * @return {Promise<Array<string>>} A list of the URLs that were expired.\n   *\n   * @private\n   */\n  async _findOldEntries(expireFromTimestamp) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(expireFromTimestamp, 'number', {\n        moduleName: 'workbox-cache-expiration',\n        className: 'CacheExpiration',\n        funcName: '_findOldEntries',\n        paramName: 'expireFromTimestamp',\n      });\n    }\n\n    if (!this._maxAgeSeconds) {\n      return [];\n    }\n\n    const expireOlderThan = expireFromTimestamp - (this._maxAgeSeconds * 1000);\n    const timestamps = await this._timestampModel.getAllTimestamps();\n    const expiredUrls = [];\n    timestamps.forEach((timestampDetails) => {\n      if (timestampDetails.timestamp < expireOlderThan) {\n        expiredUrls.push(timestampDetails.url);\n      }\n    });\n\n    return expiredUrls;\n  }\n\n  /**\n   * @return {Promise<Array>}\n   *\n   * @private\n   */\n  async _findExtraEntries() {\n    const extraUrls = [];\n\n    if (!this._maxEntries) {\n      return [];\n    }\n\n    const timestamps = await this._timestampModel.getAllTimestamps();\n    while (timestamps.length > this._maxEntries) {\n      const lastUsed = timestamps.shift();\n      extraUrls.push(lastUsed.url);\n    }\n\n    return extraUrls;\n  }\n\n  /**\n   * @param {Array<string>} urls Array of URLs to delete from cache.\n   *\n   * @private\n   */\n  async _deleteFromCache(urls) {\n    const cache = await caches.open(this._cacheName);\n    for (const url of urls) {\n      await cache.delete(url);\n    }\n  }\n\n  /**\n   * @param {Array<string>} urls Array of URLs to delete from IDB\n   *\n   * @private\n   */\n  async _deleteFromIDB(urls) {\n    for (const url of urls) {\n      await this._timestampModel.deleteUrl(url);\n    }\n  }\n\n  /**\n   * Update the timestamp for the given URL. This ensures the when\n   * removing entries based on maximum entries, most recently used\n   * is accurate or when expiring, the timestamp is up-to-date.\n   *\n   * @param {string} url\n   */\n  async updateTimestamp(url) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(url, 'string', {\n        moduleName: 'workbox-cache-expiration',\n        className: 'CacheExpiration',\n        funcName: 'updateTimestamp',\n        paramName: 'url',\n      });\n    }\n\n    const urlObject = new URL(url, location);\n    urlObject.hash = '';\n\n    await this._timestampModel.setTimestamp(urlObject.href, Date.now());\n  }\n\n  /**\n   * Can be used to check if a URL has expired or not before it's used.\n   *\n   * This requires a look up from IndexedDB, so can be slow.\n   *\n   * Note: This method will not remove the cached entry, call\n   * `expireEntries()` to remove indexedDB and Cache entries.\n   *\n   * @param {string} url\n   * @return {boolean}\n   */\n  async isURLExpired(url) {\n    if (!this._maxAgeSeconds) {\n      throw new WorkboxError(`expired-test-without-max-age`, {\n        methodName: 'isURLExpired',\n        paramName: 'maxAgeSeconds',\n      });\n    }\n    const urlObject = new URL(url, location);\n    urlObject.hash = '';\n\n    const timestamp = await this._timestampModel.getTimestamp(urlObject.href);\n    const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n    return (timestamp < expireOlderThan);\n  }\n}\n\nexport {CacheExpiration};\n","/*\n Copyright 2016 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n     http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\nimport {CacheExpiration} from './CacheExpiration.mjs';\nimport {WorkboxError} from 'workbox-core/_private/WorkboxError.mjs';\nimport {assert} from 'workbox-core/_private/assert.mjs';\nimport {cacheNames} from 'workbox-core/_private/cacheNames.mjs';\n\nimport './_version.mjs';\n\n/**\n * This plugin can be used in the Workbox API's to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the used Cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the last request to be used will be the request\n * that is removed from the Cache.\n *\n * @memberof workbox.expiration\n */\nclass Plugin {\n  /**\n   * @param {Object} config\n   * @param {number} [config.maxEntries] The maximum number of entries to cache.\n   * Entries used the least will be removed as the maximum is reached.\n   * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n   * it's treated as stale and removed.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.maxEntries || config.maxAgeSeconds)) {\n        throw new WorkboxError('max-entries-or-age-required', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n        });\n      }\n\n      if (config.maxEntries) {\n        assert.isType(config.maxEntries, 'number', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxEntries',\n        });\n      }\n\n      if (config.maxAgeSeconds) {\n        assert.isType(config.maxAgeSeconds, 'number', {\n          moduleName: 'workbox-cache-expiration',\n          className: 'Plugin',\n          funcName: 'constructor',\n          paramName: 'config.maxAgeSeconds',\n        });\n      }\n    }\n\n    this._config = config;\n    this._maxAgeSeconds = config.maxAgeSeconds;\n    this._cacheExpirations = new Map();\n  }\n\n  /**\n   * A simple helper method to return a CacheExpiration instance for a given\n   * cache name.\n   *\n   * @param {string} cacheName\n   * @return {CacheExpiration}\n   *\n   * @private\n   */\n  _getCacheExpiration(cacheName) {\n    if (cacheName === cacheNames.getRuntimeName()) {\n      throw new WorkboxError('expire-custom-caches-only');\n    }\n\n    let cacheExpiration = this._cacheExpirations.get(cacheName);\n    if (!cacheExpiration) {\n      cacheExpiration = new CacheExpiration(cacheName, this._config);\n      this._cacheExpirations.set(cacheName, cacheExpiration);\n    }\n    return cacheExpiration;\n  }\n\n  /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `workbox.runtimeCaching` handlers when a `Response` is about to be returned\n   * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n   * the handler. It allows the `Response` to be inspected for freshness and\n   * prevents it from being used if the `Response`'s `Date` header value is\n   * older than the configured `maxAgeSeconds`.\n   *\n   * @param {Object} input\n   * @param {string} input.cacheName Name of the cache the responses belong to.\n   * @param {Response} input.cachedResponse The `Response` object that's been\n   *        read from a cache and whose freshness should be checked.\n   * @return {Response} Either the `cachedResponse`, if it's\n   *         fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n   *\n   * @private\n   */\n  cachedResponseWillBeUsed({cacheName, cachedResponse}) {\n    let isFresh = this._isResponseDateFresh(cachedResponse);\n\n    // Expire entries to ensure that even if the expiration date has\n    // expired, it'll only be used once.\n    const cacheExpiration = this._getCacheExpiration(cacheName);\n    cacheExpiration.expireEntries();\n\n    return isFresh ? cachedResponse : null;\n  }\n\n  /**\n   * @param {Response} cachedResponse\n   * @return {boolean}\n   *\n   * @private\n   */\n  _isResponseDateFresh(cachedResponse) {\n    if (!this._maxAgeSeconds) {\n      // We aren't expiring by age, so return true, it's fresh\n      return true;\n    }\n\n    // Check if the 'date' header will suffice a quick expiration check.\n    // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n    // discussion.\n    const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n    if (dateHeaderTimestamp === null) {\n      // Unable to parse date, so assume it's fresh.\n      return true;\n    }\n\n    // If we have a valid headerTime, then our response is fresh iff the\n    // headerTime plus maxAgeSeconds is greater than the current time.\n    const now = Date.now();\n    return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n  }\n\n  /**\n   * This method will extract the data header and parse it into a useful\n   * value.\n   *\n   * @param {Response} cachedResponse\n   * @return {number}\n   *\n   * @private\n   */\n  _getDateHeaderTimestamp(cachedResponse) {\n    const dateHeader = cachedResponse.headers.get('date');\n    const parsedDate = new Date(dateHeader);\n    const headerTime = parsedDate.getTime();\n\n    // If the Date header was invalid for some reason, parsedDate.getTime()\n    // will return NaN.\n    if (isNaN(headerTime)) {\n      return null;\n    }\n\n    return headerTime;\n  }\n\n  /**\n   * A \"lifecycle\" callback that will be triggered automatically by the\n   * `workbox.runtimeCaching` handlers when an entry is added to a cache.\n   *\n   * @param {Object} input\n   * @param {string} input.cacheName Name of the cache the responses belong to.\n   * @param {string} input.request The Request for the cached entry.\n   *\n   * @private\n   */\n  async cacheDidUpdate({cacheName, request}) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-cache-expiration',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'cacheName',\n      });\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-cache-expiration',\n        className: 'Plugin',\n        funcName: 'cacheDidUpdate',\n        paramName: 'request',\n      });\n    }\n\n    const cacheExpiration = this._getCacheExpiration(cacheName);\n    await cacheExpiration.updateTimestamp(request.url);\n    await cacheExpiration.expireEntries();\n  }\n}\n\nexport {Plugin};\n"],"names":["workbox","v","e","CacheTimestampsModel","cacheName","_cacheName","_storeName","_db","DBWrapper","evt","target","result","createObjectStore","this","keyPath","createIndex","unique","url","timestamp","_this","put","URL","location","href","_this2","getAllMatching","_this3","get","_this4","delete","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_timestampModel","now","Date","oldEntries","_findOldEntries","extraEntries","_findExtraEntries","allUrls","Set","concat","Promise","all","_deleteFromCache","_deleteFromIDB","expireEntries","expireFromTimestamp","expireOlderThan","expiredUrls","getAllTimestamps","forEach","timestampDetails","push","extraUrls","timestamps","length","lastUsed","shift","urls","cache","caches","open","_this5","deleteUrl","urlObject","hash","_this6","setTimestamp","_this7","WorkboxError","getTimestamp","Plugin","_config","_cacheExpirations","Map","cacheNames","getRuntimeName","cacheExpiration","set","cachedResponse","isFresh","_isResponseDateFresh","_getCacheExpiration","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headers","headerTime","getTime","isNaN","request","updateTimestamp"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}